{"version":3,"sources":["webpack://gatsby-starter-default/./src/pages/cv.js"],"names":["CVHeader","title","subTitle","profilePic","console","log","className","md","Link","to","fluid","alt","CVSection","children","classes","leftAlign","defaultProps","CVList","list","map","item","key","CVTimeline","data","node","employer","from","until","description","items","itemKey","fileName","childImageSharp","cvData","aboutMeYaml","languages","language","level","links","href","link","icon","text","softwareSkills","skillList","join","leftColumn","skills","rightColumn","profile","experience","education","showHeader","fullName","jobTitle"],"mappings":"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","file":"component---src-pages-cv-js-186d2ec29520bbb7e95d.js","sourcesContent":["import * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql, Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport { Card, Col, Container, Row } from \"react-bootstrap\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nimport \"./cv.css\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport \"../utils/fontawesome\"\n\nconst CVPage = ({ data }) => {\n  const profilePic = data.fileName.childImageSharp.fluid\n  const cvData = data.aboutMeYaml\n  const languages = cvData.languages.map(\n    node => `${node.language} (${node.level})`\n  )\n  const links = cvData.links.map(node => (\n    <a href={node.link}>\n      <FontAwesomeIcon icon={node.icon} className=\"show-icon-left\" />{\" \"}\n      {node.text}{\" \"}\n      <FontAwesomeIcon icon={node.icon} className=\"show-icon-right\" />\n    </a>\n  ))\n  const softwareSkills = cvData.softwareSkills.map(node =>\n    node.skillList.join(\", \")\n  )\n\n  const leftColumn = [\n    { title: \"Links\", list: links },\n    { title: \"Skills\", list: cvData.skills },\n    { title: \"Coding/Software\", list: softwareSkills },\n    { title: \"Languages\", list: languages },\n  ]\n  const rightColumn = [\n    {\n      title: \"Profile\",\n      children: (\n        <p className=\"description-text text-justify\">{cvData.profile}</p>\n      ),\n    },\n    { title: \"Experience\", children: <CVTimeline data={cvData.experience} /> },\n    { title: \"Education\", children: <CVTimeline data={cvData.education} /> },\n  ]\n\n  return (\n    <Layout showHeader={false}>\n      <Seo title=\"CV\" />\n      <Container>\n        <CVHeader\n          title={cvData.fullName}\n          subTitle={cvData.jobTitle}\n          profilePic={profilePic}\n        />\n        <Row className=\"flex-md-row-reverse\">\n          <Col md={8}>\n            {rightColumn.map((item, key) => (\n              <CVSection title={item.title}>{item.children}</CVSection>\n            ))}\n          </Col>\n          <Col md={4}>\n            {leftColumn.map((item, key) => (\n              <CVSection title={item.title} leftAlign={false}>\n                <CVList list={item.list} leftAlign={false} />\n              </CVSection>\n            ))}\n          </Col>\n        </Row>\n      </Container>\n    </Layout>\n  )\n}\n\nconst CVHeader = ({ title, subTitle, profilePic }) => {\n  console.log(profilePic)\n  return (\n    <header className=\"cv-header-container\">\n      <Row className=\"cv-header-row\">\n        <Col md={4} className=\"mx-0 p-0\">\n          <div className=\"cv-header-color\" />\n          <div className=\"cv-header-pic\">\n            <div />\n            <Link to=\"/\">\n              <Img\n                fluid={profilePic}\n                alt=\"{title}\"\n                className=\"rounded-circle border-white\"\n              />\n            </Link>\n          </div>\n        </Col>\n        <Col md={8} className=\"mx-0 p-0\">\n          <div className=\"align-items-end cv-header-color cv-header-title\">\n            <h1 className=\"text-center\">\n              <Link to=\"/\">{title}</Link>\n            </h1>\n          </div>\n          <div className=\"align-items-start cv-header-subtitle\">\n            <h4 className=\"text-center\">\n              <Link to=\"/\">{subTitle}</Link>\n            </h4>\n          </div>\n        </Col>\n      </Row>\n    </header>\n  )\n}\n\nCVHeader.propTypes = {\n  profilePic: PropTypes.object.isRequired,\n  subTitle: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n}\n\nconst CVSection = ({ children, title, leftAlign }) => {\n  const classes =\n    (leftAlign ? \"right-column\" : \"left-column\") + \" section-title\"\n  return (\n    <>\n      <h4 className={classes}>{title}</h4>\n      <hr />\n      {children}\n    </>\n  )\n}\n\nCVSection.propTypes = {\n  children: PropTypes.node.isRequired,\n  leftAlign: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n}\n\nCVSection.defaultProps = {\n  leftAlign: true,\n}\n\nconst CVList = ({ list, leftAlign }) => {\n  const classes =\n    (leftAlign ? \"right-column\" : \"left-column\") + \" description-text\"\n  return (\n    <>\n      {list.map((item, key) => (\n        <p key={key} className={classes}>\n          {item}\n        </p>\n      ))}\n    </>\n  )\n}\n\nCVList.propTypes = {\n  leftAlign: PropTypes.bool,\n  list: PropTypes.array.isRequired,\n}\n\nCVList.defaultProps = {\n  leftAlign: true,\n}\n\nconst CVTimeline = ({ data }) => {\n  return (\n    <>\n      {data.map((node, key) => (\n        <Container key={key} className=\"px-0 timeline-paragraph\">\n          <p>\n            <b>{node.title}</b> &mdash; {node.employer}\n          </p>\n          <p className=\"text-muted\">\n            {node.from} &ndash; {node.until ? node.until : \"present\"}\n          </p>\n          <p className=\"description-text text-justify\">{node.description}</p>\n          {node.items ? (\n            <ul>\n              {node.items.map((item, itemKey) => (\n                <li key={itemKey} className=\"description-text text-justify\">\n                  {item}\n                </li>\n              ))}\n            </ul>\n          ) : (\n            \"\"\n          )}\n        </Container>\n      ))}\n    </>\n  )\n}\n\nCVTimeline.propTypes = {\n  data: PropTypes.array.isRequired,\n}\n\nexport default CVPage\n\nexport const cvDataQuery = graphql`\n  query getCVData {\n    fileName: file(relativePath: { eq: \"profile.jpg\" }) {\n      childImageSharp {\n        fluid(maxWidth: 250, maxHeight: 250, jpegQuality: 95) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    aboutMeYaml {\n      fullName\n      jobTitle\n      links {\n        icon\n        link\n        text\n      }\n      skills\n      softwareSkills {\n        type\n        skillList\n      }\n      languages {\n        language\n        level\n      }\n      profile\n      experience {\n        title\n        employer\n        description\n        items\n        from(formatString: \"MMM YYYY\", locale: \"en_US\")\n        until(formatString: \"MMM YYYY\", locale: \"en_US\")\n      }\n      education {\n        title\n        employer\n        from(formatString: \"MMM YYYY\", locale: \"en_US\")\n        until(formatString: \"MMM YYYY\", locale: \"en_US\")\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}