{"version":3,"file":"component---src-pages-cv-js-178661f30e64ea7cc781.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/pages/cv.js"],"sourcesContent":["import * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql, Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport { Card, Col, Container, Row } from \"react-bootstrap\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nimport \"./cv.css\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport \"../utils/fontawesome\"\n\nconst CVPage = ({ data }) => {\n  const profilePic = data.fileName.childImageSharp.fluid\n  const cvData = data.aboutMeYaml\n  const languages = cvData.languages.map(\n    node => `${node.language} (${node.level})`\n  )\n  const links = cvData.links.map(node => (\n    <a href={node.link}>\n      <FontAwesomeIcon icon={node.icon} className=\"show-icon-left\" />{\" \"}\n      {node.text}{\" \"}\n      <FontAwesomeIcon icon={node.icon} className=\"show-icon-right\" />\n    </a>\n  ))\n  const softwareSkills = cvData.softwareSkills.map(node =>\n    node.skillList.join(\", \")\n  )\n\n  const leftColumn = [\n    { title: \"Links\", list: links },\n    { title: \"Skills\", list: cvData.skills },\n    { title: \"Coding/Software\", list: softwareSkills },\n    { title: \"Languages\", list: languages },\n  ]\n  const rightColumn = [\n    {\n      title: \"Profile\",\n      children: (\n        <p className=\"description-text text-justify\">{cvData.profile}</p>\n      ),\n    },\n    { title: \"Experience\", children: <CVTimeline data={cvData.experience} /> },\n    { title: \"Education\", children: <CVTimeline data={cvData.education} /> },\n  ]\n\n  return (\n    <Layout showHeader={false}>\n      <Seo title=\"CV\" />\n      <Container>\n        <CVHeader\n          title={cvData.fullName}\n          subTitle={cvData.jobTitle}\n          profilePic={profilePic}\n        />\n        <Row className=\"flex-md-row-reverse\">\n          <Col md={8}>\n            {rightColumn.map((item, key) => (\n              <CVSection title={item.title}>{item.children}</CVSection>\n            ))}\n          </Col>\n          <Col md={4}>\n            {leftColumn.map((item, key) => (\n              <CVSection title={item.title} leftAlign={false}>\n                <CVList list={item.list} leftAlign={false} />\n              </CVSection>\n            ))}\n          </Col>\n        </Row>\n      </Container>\n    </Layout>\n  )\n}\n\nconst CVHeader = ({ title, subTitle, profilePic }) => {\n  console.log(profilePic)\n  return (\n    <header className=\"cv-header-container\">\n      <Row className=\"cv-header-row\">\n        <Col md={4} className=\"mx-0 p-0\">\n          <div className=\"cv-header-color\" />\n          <div className=\"cv-header-pic\">\n            <div />\n            <Link to=\"/\">\n              <Img\n                fluid={profilePic}\n                alt=\"{title}\"\n                className=\"rounded-circle border-white\"\n              />\n            </Link>\n          </div>\n        </Col>\n        <Col md={8} className=\"mx-0 p-0\">\n          <div className=\"align-items-end cv-header-color cv-header-title\">\n            <h1 className=\"text-center\">\n              <Link to=\"/\">{title}</Link>\n            </h1>\n          </div>\n          <div className=\"align-items-start cv-header-subtitle\">\n            <h4 className=\"text-center\">\n              <Link to=\"/\">{subTitle}</Link>\n            </h4>\n          </div>\n        </Col>\n      </Row>\n    </header>\n  )\n}\n\nCVHeader.propTypes = {\n  profilePic: PropTypes.object.isRequired,\n  subTitle: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n}\n\nconst CVSection = ({ children, title, leftAlign }) => {\n  const classes =\n    (leftAlign ? \"right-column\" : \"left-column\") + \" section-title\"\n  return (\n    <>\n      <h4 className={classes}>{title}</h4>\n      <hr />\n      {children}\n    </>\n  )\n}\n\nCVSection.propTypes = {\n  children: PropTypes.node.isRequired,\n  leftAlign: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n}\n\nCVSection.defaultProps = {\n  leftAlign: true,\n}\n\nconst CVList = ({ list, leftAlign }) => {\n  const classes =\n    (leftAlign ? \"right-column\" : \"left-column\") + \" description-text\"\n  return (\n    <>\n      {list.map((item, key) => (\n        <p key={key} className={classes}>\n          {item}\n        </p>\n      ))}\n    </>\n  )\n}\n\nCVList.propTypes = {\n  leftAlign: PropTypes.bool,\n  list: PropTypes.array.isRequired,\n}\n\nCVList.defaultProps = {\n  leftAlign: true,\n}\n\nconst CVTimeline = ({ data }) => {\n  return (\n    <>\n      {data.map((node, key) => (\n        <Container key={key} className=\"px-0 timeline-paragraph\">\n          <p>\n            <b>{node.title}</b> &mdash; {node.employer}\n          </p>\n          <p className=\"text-muted\">\n            {node.from} &ndash; {node.until ? node.until : \"present\"}\n          </p>\n          <p className=\"description-text text-justify\">{node.description}</p>\n          {node.items ? (\n            <ul>\n              {node.items.map((item, itemKey) => (\n                <li key={itemKey} className=\"description-text text-justify\">\n                  {item}\n                </li>\n              ))}\n            </ul>\n          ) : (\n            \"\"\n          )}\n        </Container>\n      ))}\n    </>\n  )\n}\n\nCVTimeline.propTypes = {\n  data: PropTypes.array.isRequired,\n}\n\nexport default CVPage\n\nexport const cvDataQuery = graphql`\n  query getCVData {\n    fileName: file(relativePath: { eq: \"profile.jpg\" }) {\n      childImageSharp {\n        fluid(maxWidth: 250, maxHeight: 250, jpegQuality: 95) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    aboutMeYaml {\n      fullName\n      jobTitle\n      links {\n        icon\n        link\n        text\n      }\n      skills\n      softwareSkills {\n        type\n        skillList\n      }\n      languages {\n        language\n        level\n      }\n      profile\n      experience {\n        title\n        employer\n        description\n        items\n        from(formatString: \"MMM YYYY\", locale: \"en_US\")\n        until(formatString: \"MMM YYYY\", locale: \"en_US\")\n      }\n      education {\n        title\n        employer\n        from(formatString: \"MMM YYYY\", locale: \"en_US\")\n        until(formatString: \"MMM YYYY\", locale: \"en_US\")\n        description\n      }\n    }\n  }\n`\n"],"names":["CVHeader","_ref2","title","subTitle","profilePic","console","log","React","className","Row","Col","md","Link","to","Img","fluid","alt","CVSection","_ref3","children","leftAlign","classes","defaultProps","CVList","_ref4","list","map","item","key","CVTimeline","_ref5","data","node","Container","employer","from","until","description","items","itemKey","_ref","fileName","childImageSharp","cvData","aboutMeYaml","languages","language","level","links","href","link","FontAwesomeIcon","icon","text","softwareSkills","skillList","join","leftColumn","skills","rightColumn","profile","experience","education","Layout","showHeader","Seo","fullName","jobTitle"],"sourceRoot":""}